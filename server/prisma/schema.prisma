generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Course {
  id                String          @id @default(uuid())
  title             String
  description       String          @db.Text
  price             Float
  category          String          @default("other")
  level             String          @default("beginner")
  duration          String          @default("0.00")
  status            String          @default("DRAFT")
  imageUrl          String?
  thumbnail         String?
  rating            String?         @default("0.00")
  learningObjectives Json?
  requirements      Json?
  instructorId      String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  instructor        User            @relation("InstructorCourses", fields: [instructorId], references: [id])
  enrollments       Enrollment[]
  groups            Group[]
  lessons           Lesson[]
  reviews           CourseReview[]

  @@index([instructorId])
  @@index([category])
  @@index([level])
}

model CourseReview {
  id        String   @id
  rating    Int
  comment   String   @db.Text
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Course    Course   @relation(fields: [courseId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

model Enrollment {
  id        String   @id
  userId    String
  courseId  String
  progress  Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  status    String   @default("pending")
  Course    Course   @relation(fields: [courseId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
}

model Group {
  id          String        @id
  name        String
  description String        @db.Text
  courseId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Course      Course        @relation(fields: [courseId], references: [id])
  GroupMember GroupMember[]
  Message     Message[]

  @@index([courseId])
}

model GroupMember {
  id        String   @id
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  groupId   String
  Group     Group    @relation(fields: [groupId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
  @@index([groupId])
}

enum LessonType {
  VIDEO
  READING
  ASSIGNMENT
}

model Lesson {
  id             String           @id @default(cuid())
  title          String
  description    String?          @db.Text 
  content        String?          @db.Text 
  videoUrl       String?          // For video lessons
  quizData       Json?            // For quiz content
  duration       Int?              // in minutes
  type           LessonType       @default(READING)
  order          Int
  courseId       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  Course         Course           @relation(fields: [courseId], references: [id])
  LessonProgress LessonProgress[]
  Submission     Submission[]

  @@index([courseId])
}

model LessonProgress {
  id        String   @id
  completed Boolean  @default(false)
  timeSpent Int     @default(0)
  lessonId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Lesson    Lesson   @relation(fields: [lessonId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
  @@index([lessonId])
}

model Message {
  id        String   @id
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  groupId   String
  Group     Group    @relation(fields: [groupId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@index([groupId])
  @@index([userId])
}

model Submission {
  id        String   @id
  content   String   @db.Text
  feedback  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  lessonId  String
  grade     Float?
  Lesson    Lesson   @relation(fields: [lessonId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@index([lessonId])
  @@index([userId])
}

model User {
  id                     String           @id
  email                  String           @unique
  password               String
  name                   String
  role                   User_role        @default(STUDENT)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime
  avatar                 String?
  status                 String           @default("ACTIVE")
  dateOfBirth            DateTime?
  educationLevel         String?
  hasCompletedOnboarding Boolean          @default(false)
  interests              String?          @db.Text
  occupation             String?
  phoneNumber            String?
  preferredLanguage      String?
  Course                 Course[]         @relation("InstructorCourses")
  CourseReview           CourseReview[]
  Enrollment             Enrollment[]
  GroupMember            GroupMember[]
  LessonProgress         LessonProgress[]
  Message                Message[]
  Submission             Submission[]

  @@index([email])
}

enum User_role {
  STUDENT
  INSTRUCTOR
  ADMIN
} 