generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum CourseStatus {
  DRAFT
  IN_REVIEW
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  VIDEO
  READING
  QUIZ
  ASSIGNMENT
  LIVE_SESSION
}

enum ResourceType {
  DOCUMENT
  VIDEO
  AUDIO
  CODE
  LINK
}

model User {
  id                     String           @id @default(uuid())
  email                  String           @unique
  password               String
  name                   String
  role                   UserRole         @default(STUDENT)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  avatar                 String?
  status                 String           @default("ACTIVE")
  dateOfBirth            DateTime?
  educationLevel         String?
  hasCompletedOnboarding Boolean          @default(false)
  interests              String?          @db.Text
  occupation             String?
  phoneNumber            String?
  preferredLanguage      String?
  instructorProfile      Json?            // Store all instructor-specific data here
  
  // Relations
  instructedCourses     Course[]         @relation("InstructorCourses")
  courseReviews         CourseReview[]
  enrollments           Enrollment[]
  groupMembers          GroupMember[]
  lessonProgress        LessonProgress[]
  messages              Message[]
  submissions           Submission[]

  @@index([email])
}

model Course {
  id                String          @id @default(uuid())
  title             String
  description       String          @db.Text
  price             Float?          @default(0)
  category          String          @default("other")
  level             String          @default("beginner")
  duration          Int             @default(0)  // Total duration in minutes
  status            CourseStatus    @default(DRAFT)
  imageUrl          String?
  thumbnail         String?
  rating            Float?          @default(0)
  learningObjectives Json?          // Array of learning objectives
  requirements      Json?           // Array of prerequisites
  instructorId      String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  lastSavedStep     String?         // Track wizard progress
  isLiveEnabled     Boolean         @default(false)
  liveSessionDetails Json?          // Store live session configuration
  language          String          @default("English")
  tags              String?         @db.Text     // Made optional
  completionCriteria Json?          // Define what constitutes course completion

  // Relations
  instructor        User            @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  sections          Section[]
  enrollments       Enrollment[]
  reviews           CourseReview[]
  groups            Group[]
  lessons           Lesson[]

  @@index([instructorId])
  @@index([category])
  @@index([level])
  @@index([status])
}

model Section {
  id          String    @id @default(uuid())
  title       String
  description String?   @db.Text
  order       Int
  courseId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
}

model CourseReview {
  id        String   @id @default(uuid())
  rating    Int
  comment   String   @db.Text
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  progress  Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("pending")
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
}

model Group {
  id          String        @id @default(uuid())
  name        String
  description String        @db.Text
  courseId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  course      Course        @relation(fields: [courseId], references: [id])
  groupMembers GroupMember[]
  messages     Message[]

  @@index([courseId])
}

model GroupMember {
  id        String   @id @default(uuid())
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
  @@index([groupId])
}

model Lesson {
  id                String           @id @default(uuid())
  title             String
  description       String?          @db.Text
  type             LessonType       @default(VIDEO)
  content          String?          @db.Text
  videoUrl         String?
  duration         Int?
  order            Int              @default(0)  // Added default
  isPreview        Boolean          @default(false)
  sectionId        String?          // Made optional temporarily
  courseId         String
  attachments      Json?            // Array of attachment URLs and metadata
  completionCriteria Json?          // Specific completion requirements
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  section          Section?         @relation(fields: [sectionId], references: [id], onDelete: SetNull)  // Made optional
  course           Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress         LessonProgress[]
  resources        Resource[]
  submissions      Submission[]

  @@index([sectionId])
  @@index([courseId])
}

model Resource {
  id          String       @id @default(uuid())
  title       String
  type        ResourceType @default(DOCUMENT)
  url         String
  lessonId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  lesson      Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([lessonId])
}

model LessonProgress {
  id          String    @id @default(uuid())
  completed   Boolean   @default(false)
  timeSpent   Int       @default(0)
  lastPosition Int      @default(0)  // For video progress tracking
  lessonId    String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([lessonId])
  @@index([userId])
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([groupId])
  @@index([userId])
}

model Submission {
  id        String   @id @default(uuid())
  content   String   @db.Text
  feedback  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  lessonId  String
  grade     Float?
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([lessonId])
  @@index([userId])
} 