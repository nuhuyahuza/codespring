generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Course {
  id           String         @id
  title        String
  description  String         @db.Text
  price        Float
  instructorId String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  category     String         @default("other")
  duration     Int            @default(0)
  imageUrl     String?
  level        String         @default("beginner")
  status       String         @default("DRAFT")
  User         User           @relation(fields: [instructorId], references: [id])
  CourseReview CourseReview[]
  Enrollment   Enrollment[]
  Group        Group[]
  Lesson       Lesson[]

  @@index([instructorId])
}

model CourseReview {
  id        String   @id
  rating    Int
  comment   String   @db.Text
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Course    Course   @relation(fields: [courseId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

model Enrollment {
  id        String   @id
  userId    String
  courseId  String
  progress  Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  status    String   @default("pending")
  Course    Course   @relation(fields: [courseId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId], map: "Enrollment_courseId_fkey")
}

model Group {
  id          String        @id
  name        String
  description String        @db.Text
  courseId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Course      Course        @relation(fields: [courseId], references: [id])
  GroupMember GroupMember[]
  Message     Message[]

  @@index([courseId], map: "Group_courseId_fkey")
}

model GroupMember {
  id        String   @id
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  groupId   String
  Group     Group    @relation(fields: [groupId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
  @@index([groupId], map: "GroupMember_groupId_fkey")
}

model Lesson {
  id             String           @id
  title          String
  content        String           @db.Text
  videoUrl       String?
  order          Int
  courseId       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  Course         Course           @relation(fields: [courseId], references: [id])
  LessonProgress LessonProgress[]
  Submission     Submission[]

  @@index([courseId], map: "Lesson_courseId_fkey")
}

model LessonProgress {
  id        String   @id
  completed Boolean  @default(false)
  timeSpent Int      @default(0)
  lessonId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Lesson    Lesson   @relation(fields: [lessonId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
  @@index([lessonId], map: "LessonProgress_lessonId_fkey")
}

model Message {
  id        String   @id
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  groupId   String
  Group     Group    @relation(fields: [groupId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@index([groupId], map: "Message_groupId_fkey")
  @@index([userId], map: "Message_userId_fkey")
}

model Submission {
  id        String   @id
  content   String   @db.Text
  feedback  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  lessonId  String
  grade     Float?
  Lesson    Lesson   @relation(fields: [lessonId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@index([lessonId], map: "Submission_lessonId_fkey")
  @@index([userId], map: "Submission_userId_fkey")
}

model Testimonial {
  id        String   @id
  content   String   @db.Text
  studentId String
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [studentId], references: [id])

  @@index([studentId])
}

model User {
  id                     String           @id
  email                  String           @unique
  password               String
  name                   String
  role                   User_role        @default(STUDENT)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime
  avatar                 String?
  status                 String           @default("ACTIVE")
  dateOfBirth            DateTime?
  educationLevel         String?
  hasCompletedOnboarding Boolean          @default(false)
  interests              String?          @db.Text
  occupation             String?
  phoneNumber            String?
  preferredLanguage      String?
  Course                 Course[]
  CourseReview           CourseReview[]
  Enrollment             Enrollment[]
  GroupMember            GroupMember[]
  LessonProgress         LessonProgress[]
  Message                Message[]
  Submission             Submission[]
  Testimonial            Testimonial[]
}

enum User_role {
  STUDENT
  INSTRUCTOR
  ADMIN
}
