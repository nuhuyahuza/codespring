// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  password        String?
  role            UserRole  @default(STUDENT)
  emailVerified   DateTime?
  image           String?
  resetToken      String?   @unique
  resetTokenExpiry DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // OAuth providers
  googleId        String?   @unique
  facebookId      String?   @unique

  // Relations
  enrollments     Enrollment[]
  courses         Course[]      @relation("CourseInstructor")
  reviews         Review[]
  messages        Message[]
  groups          GroupMember[]
  lessonProgress  LessonProgress[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  price       Float
  duration    Int      // in minutes
  difficulty  String
  tags        String?  // JSON array of tags
  thumbnail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  instructorId String
  instructor   User          @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments  Enrollment[]
  lessons      Lesson[]
  sessions     Session[]
  reviews      Review[]
  groups       Group[]

  @@map("courses")
}

model Enrollment {
  id            String   @id @default(cuid())
  userId        String
  courseId      String
  paymentStatus String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  course  Course  @relation(fields: [courseId], references: [id])

  @@map("enrollments")
}

model Session {
  id        String   @id @default(cuid())
  title     String
  startTime DateTime
  duration  Int      // in minutes
  link      String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course    Course   @relation(fields: [courseId], references: [id])

  @@map("sessions")
}

model Message {
  id         String   @id @default(cuid())
  content    String   @db.Text
  userId     String
  groupId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])

  @@map("messages")
}

model Group {
  id        String   @id @default(cuid())
  name      String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course    Course        @relation(fields: [courseId], references: [id])
  members   GroupMember[]
  messages  Message[]

  @@map("groups")
}

model GroupMember {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])

  @@map("group_members")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?  @db.Text
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@map("reviews")
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  videoUrl  String?
  content   String?  @db.Text
  order     Int
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course    Course   @relation(fields: [courseId], references: [id])
  progress  LessonProgress[]

  @@map("lessons")
}

model LessonProgress {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  lesson    Lesson   @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model SystemSettings {
  id                    Int      @id @default(1)
  // General settings
  general               Json     @default("{\"siteName\":\"CodeSpring\",\"siteDescription\":\"Online Learning Platform\",\"maintenanceMode\":false,\"allowRegistration\":true,\"defaultUserRole\":\"STUDENT\"}")
  // Email settings
  email                Json     @default("{\"provider\":\"SMTP\",\"fromEmail\":\"noreply@codespring.com\",\"smtpHost\":null,\"smtpPort\":null,\"smtpUsername\":null,\"smtpPassword\":null,\"apiKey\":null}")
  // Notification settings
  notifications        Json     @default("{\"enableEmailNotifications\":true,\"enablePushNotifications\":true,\"enableSMSNotifications\":false,\"defaultNotificationTypes\":[\"course_updates\",\"assignments\",\"messages\",\"announcements\"]}")
  // Security settings
  security            Json     @default("{\"sessionTimeout\":30,\"maxLoginAttempts\":5,\"passwordMinLength\":8,\"requirePasswordReset\":90,\"twoFactorAuth\":false}")
  // Payment settings
  payment             Json     @default("{\"currency\":\"USD\",\"stripeEnabled\":true,\"paypalEnabled\":false,\"stripePublicKey\":null,\"stripeSecretKey\":null,\"paypalClientId\":null,\"paypalSecretKey\":null}")
  // Storage settings
  storage             Json     @default("{\"provider\":\"S3\",\"maxFileSize\":50,\"allowedFileTypes\":[\"image/*\",\"video/*\",\"application/pdf\"],\"s3Bucket\":null,\"s3Region\":null,\"s3AccessKey\":null,\"s3SecretKey\":null}")
  // Timestamps
  updatedAt           DateTime @updatedAt
  createdAt           DateTime @default(now())
}
