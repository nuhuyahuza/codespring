// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  password      String
  name          String
  role          Role       @default(STUDENT)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  resetToken    String?
  resetTokenExp DateTime?
  
  // Relations
  taughtCourses Course[]  @relation("InstructorCourses")
  enrollments   Enrollment[]
  progress      LessonProgress[]
  certificates  Certificate[]
  attendedSessions LiveSession[] @relation("SessionAttendees")
  instructedSessions LiveSession[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  price       Float
  duration    Int      @default(0)
  imageUrl    String?
  category    String
  level       String   @default("BEGINNER")
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  instructor    User     @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId  String
  enrollments   Enrollment[]
  lessons       Lesson[]
  liveSessions  LiveSession[]
  certificates  Certificate[]
}

model Enrollment {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  paymentStatus String   @default("PENDING")
  
  // Relations
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  course      Course  @relation(fields: [courseId], references: [id])
  courseId    String

  @@unique([userId, courseId])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  videoUrl    String?
  duration    Int      @default(0)
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  progress    LessonProgress[]
}

model LessonProgress {
  id          String   @id @default(cuid())
  completed   Boolean  @default(false)
  timeSpent   Int      @default(0)
  lastPosition Float   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  lessonId    String

  @@unique([userId, lessonId])
}

model LiveSession {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  startTime   DateTime
  duration    Int
  meetingUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  instructor  User     @relation(fields: [instructorId], references: [id])
  instructorId String
  attendees   User[]   @relation("SessionAttendees")
}

model Certificate {
  id            String   @id @default(cuid())
  credentialId  String   @unique
  issueDate     DateTime @default(now())
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  course        Course   @relation(fields: [courseId], references: [id])
  courseId      String

  @@unique([userId, courseId])
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}
