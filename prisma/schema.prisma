// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  name          String
  role          Role       @default(STUDENT)
  status        String     @default("ACTIVE")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  courses       Course[]      @relation("InstructorCourses")
  enrollments   Enrollment[]
  submissions   Submission[]
  groupMembers  GroupMember[]
  messages      Message[]
  lessonProgress LessonProgress[]
  reviews       CourseReview[]
}

model Course {
  id          String       @id @default(uuid())
  title       String
  description String       @db.Text
  price       Float
  category    String       @default("other")
  level       String       @default("beginner")
  duration    Int         @default(0)
  status      String       @default("DRAFT")
  imageUrl    String?
  instructor  User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId String
  enrollments Enrollment[]
  groups      Group[]
  lessons     Lesson[]
  reviews     CourseReview[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([instructorId])
}

model Enrollment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  progress  Float    @default(0)
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Lesson {
  id          String       @id @default(uuid())
  title       String
  content     String       @db.Text
  videoUrl    String?
  order       Int
  course      Course       @relation(fields: [courseId], references: [id])
  courseId    String
  submissions Submission[]
  progress    LessonProgress[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([courseId])
}

model Submission {
  id           String     @id @default(cuid())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  fileUrl      String
  notes        String?    @db.Text
  grade        Int?
  feedback     String?    @db.Text
  status       SubmissionStatus @default(SUBMITTED)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([assignmentId])
  @@index([userId])
}

model Group {
  id          String       @id @default(uuid())
  name        String
  description String       @db.Text
  course      Course       @relation(fields: [courseId], references: [id])
  courseId    String
  members     GroupMember[]
  messages    Message[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([courseId])
}

model GroupMember {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([groupId])
}

model LessonProgress {
  id        String   @id @default(uuid())
  completed Boolean  @default(false)
  timeSpent Int     @default(0)
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model CourseReview {
  id        String   @id @default(uuid())
  rating    Int      @db.Int
  comment   String   @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Assignment {
  id          String      @id @default(cuid())
  title       String
  description String      @db.Text
  dueDate     DateTime
  courseId    String
  course      Course      @relation(fields: [courseId], references: [id])
  submissions Submission[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([courseId])
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
}
